mrc.controller('AppCtrl', ['$scope', '$ionicModal', '$timeout', '$state', '$auth', '$rootScope', '$ionicPopup', '$filter', 'apiConfig', 'UserService', '$ionicLoading', 'CartService',
                  function($scope, $ionicModal, $timeout, $state, $auth, $rootScope, $ionicPopup, $filter, apiConfig, UserService, $ionicLoading, CartService) {

  // With the new view caching in Ionic, Controllers are only called
  // when they are recreated or on app start, instead of every page change.
  // To listen for when this page is active (for example, to refresh data),
  // listen for the $ionicView.enter event:
  //$scope.$on('$ionicView.enter', function(e) {
  //});

  var vm = this;

  vm.CartService = CartService;

  // Form data for the login modals
  vm.loginData = {};

  // Create the login modal that we will use later
  $ionicModal.fromTemplateUrl('templates/login.html', {
    scope: $scope,
    animation: 'slide-in-up'
  }).then(function(modal) {
    vm.modal = modal;
  });

  //Triggered in the login modal to close it
  vm.closeLogin = function() {
    vm.modal.hide();
  };

  // Open the login modal
  vm.login = function() {
    vm.modal.show();
  };

  // Logout
  vm.logout = function() {
    $auth.logout();
    $rootScope.$broadcast("deletestate");
    vm.showAlert('global.LOGOUT_SUCCESS_TITLE', 'global.LOGOUT_SUCCESS_MESSAGE');
  };

  // Perform the login action when the user submits the login form
  vm.doLogin = function(provider) {
    $ionicLoading.show();
    $auth.login(vm.loginData, {url: apiConfig.base + apiConfig.auth, method: 'POST'})
    .then(function(response) {
      UserService.getAuthenticatedUser();
      $rootScope.$broadcast("savestate");
      vm.showAlert('global.LOGIN_SUCCESS_TITLE', 'global.LOGIN_SUCCESS_MESSAGE');
      vm.closeLogin();
      $ionicLoading.hide();
    })
    .catch(function(response) {
      // Handle errors here, such as displaying a notification
      // for invalid email and/or password.
      $ionicLoading.hide();
      vm.showAlert('global.LOGIN_ERROR_TITLE', 'global.LOGIN_ERROR_MESSAGE');
      vm.loginData.password = null;

    });

  };

  vm.isActive = function(stateName){
    return $state.includes(stateName);
  };

  vm.isAuthenticated = function() {
    return $auth.isAuthenticated();
  };

  vm.goToCart = function() {
    return $state.go('app.cart');
  };

  vm.showAlert = function(title, message) {

         //Translates title and message
         var titleTranslated = $filter('translate')(title);
         var messageTranslated = $filter('translate')(message);

         //Creates the popup
         var alertPopup = $ionicPopup.alert({
           title: titleTranslated,
           template: messageTranslated
         });

         //Displays the popup
         alertPopup.then(function(res) {
           console.log('Thank you for not eating my delicious ice cream cone');
         });
       };

}]);

mrc.controller('CartCtrl', [ '$state', '$stateParams', 'ItemService', 'CartService', function($state, $stateParams, ItemService, CartService) {
  var vm = this;

  vm.CartService = CartService;
  vm.CartService.addItem({title: 'teste', price: 34.50, description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'}, 2);
  vm.listCanSwipe = true;

}]);

mrc.controller('CategoriesCtrl', [ 'CategoryService', function(CategoryService) {

  var vm = this;

  vm.categories = [];
  vm.error = false;

  CategoryService.getAllCategories().then(function() {
    if(CategoryService.error){
        vm.error = true;
    }
    vm.categories = CategoryService.data;
  });

}]);

mrc.controller('CategoryCtrl', ["$scope", "$state", "$stateParams", "$ionicLoading", "ItemService", function($scope, $state, $stateParams, $ionicLoading, ItemService) {

	var vm = this;

  vm.items = [];

	vm.category_name = $stateParams.category_name;
	vm.category_id = $stateParams.category_id;

	$scope.$on('$ionicView.enter', function(e) {
			ItemService.getAllItemsByCategoryId(vm.category_id).then(function() {
		    vm.items = ItemService.data;
		  });
	});

	vm.clearSearch = function(){
		vm.searchItem = '';
	};

}]);

mrc.controller('ContactCtrl', ["$scope", function($scope) {

}]);
mrc.controller('ItemCtrl', [ '$state', '$stateParams', 'ItemService', 'CartService', function($state, $stateParams, ItemService, CartService) {
  var vm = this;

  vm.item = [];

  vm.cart = CartService;

  var category_id = $stateParams.category_id;
  var item_id = $stateParams.item_id;

  ItemService.getItem(category_id, item_id).then(function() {
    vm.item = ItemService.data;
  });

}]);

mrc.controller('PlaylistsCtrl', ["$scope", function($scope) {
  $scope.playlists = [
    { title: 'Reggae', id: 1 },
    { title: 'Chill', id: 2 },
    { title: 'Dubstep', id: 3 },
    { title: 'Indie', id: 4 },
    { title: 'Rap', id: 5 },
    { title: 'Cowbell', id: 6 }
  ];
}]);
mrc.controller('SettingsCtrl', ["$scope", function($scope) {

}]);
mrc.controller('TranslateCtrl', ["$translate", "$state", "$ionicHistory", function($translate, $state, $ionicHistory) {
  
  var vm = this;

  vm.changeLanguage = function (langKey) {
    $translate.use(langKey);
    
    $ionicHistory.nextViewOptions({
	    disableBack: true
  	});

    $state.go('app.home');
    
  };

}]);