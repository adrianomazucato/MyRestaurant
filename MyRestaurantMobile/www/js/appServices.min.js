mrs.service('CartService', ['$rootScope', '$ionicPopup', function ($rootScope, $ionicPopup) {

    var vm = this;

    vm.items = [];
    vm.shouldShowDelete = false;

    vm.addItem = function (item, quantity) {
      item.quantity = quantity;
      vm.items.push(item);
    };

    vm.removeItem = function (item) {
      var index = vm.items.indexOf(item);
      vm.items.splice(index, 1);
    };

    vm.incrementQuanity = function(item){
        item.quantity++;
    };

    vm.decrementQuanity = function(item){
      if(item.quantity != 1)
      {
        item.quantity--;
      }
    };

    vm.emptyCart = function () {
      vm.items = [];
    };

    vm.totalAmount = function () {
      var total = 0;
       for (var i = 0; i < vm.items.length; i++) {
              total = total + (vm.items[i].price * vm.items[i].quantity );
            }
       return total;
    };

    vm.toggleDelete = function(){
      console.log('fired');
      if(vm.shouldShowDelete === true){
        vm.shouldShowDelete = false;
      }else{
        vm.shouldShowDelete = true;
      }
    };

}]);

mrs.factory('CategoryService', [ '$http', '$ionicLoading', 'apiConfig', '$ionicPopup', function($http, $ionicLoading, apiConfig, $ionicPopup){

  // interface
  var service = {
      data: [],
      error: false,
      getAllCategories: getAllCategories
  };

  return service;

  // implementation
  function getAllCategories() {
    var apiUrl = apiConfig.base + apiConfig.categories;
    $ionicLoading.show();
    return $http.get(apiUrl, { cache: true}).then(success, error);
  }

  //Handles success callback
  function success (response){
        $ionicLoading.hide();
        service.data = response.data.data;
  }

  //Handles error callback
  function error (){
        $ionicLoading.hide();
        $ionicPopup.alert({title: 'Ops!', template: 'An error ocurred while trying to get categories list! Make sure your internet connection is active.'});
        service.error = true;
  }

}]);

mrs.factory('ItemService', [ '$http', '$ionicLoading', 'apiConfig', function($http, $ionicLoading, apiConfig){

  // interface
  var service = {
      data: [],
      getAllItemsByCategoryId: getAllItemsByCategoryId,
      getItem: getItem
  };

  return service;

  // implementation
  function getAllItemsByCategoryId(category_id) {
    var apiUrl = apiConfig.base + apiConfig.categories + category_id + apiConfig.items + apiConfig.includeImages;
    $ionicLoading.show();
    return $http.get(apiUrl, { cache: true})
        .success(function(response) {
            $ionicLoading.hide();
            service.data = response.data;
        });

  }

  function getItem(category_id, item_id) {
    var apiUrl = apiConfig.base + apiConfig.categories + category_id + apiConfig.items + item_id + apiConfig.includeImages;
    $ionicLoading.show();
    return $http.get(apiUrl, { cache: true})
        .success(function(response) {
            $ionicLoading.hide();
            service.data = response.data;
        });

  }



}]);

mrs.service('LoginService', ["$state", "$ionicHistory", "apiConfig", "$ionicLoading", "$auth", "$ionicPopup", "$filter", "UserService", "$rootScope", function ($state, $ionicHistory, apiConfig, $ionicLoading, $auth, $ionicPopup, $filter, UserService, $rootScope) {
    var vm = this;

    // Form data for the login inputs
    vm.loginData = {};

    // Perform the login action when the user submits the login form
    vm.doLogin = function(provider) {
      $ionicLoading.show();
      $auth.login(vm.loginData, {url: apiConfig.base + apiConfig.auth, method: 'POST'})
      .then(function(response) {
        UserService.getAuthenticatedUser();
        $rootScope.$broadcast("savestate");
        vm.showAlert('global.LOGIN_SUCCESS_TITLE', 'global.LOGIN_SUCCESS_MESSAGE');
        vm.closeLogin();
        $ionicLoading.hide();
      })
      .catch(function(response) {
        // Handle errors here, such as displaying a notification
        // for invalid email and/or password.
        $ionicLoading.hide();
        vm.showAlert('global.LOGIN_ERROR_TITLE', 'global.LOGIN_ERROR_MESSAGE');
        vm.loginData.password = null;

      });

    };

    vm.closeLogin = function() {
      $ionicHistory.nextViewOptions({
        disableBack: true
      });
      $state.go('app.home');
    };

    vm.showAlert = function(title, message) {

           //Translates title and message
           var titleTranslated = $filter('translate')(title);
           var messageTranslated = $filter('translate')(message);

           //Creates the popup
           var alertPopup = $ionicPopup.alert({
             title: titleTranslated,
             template: messageTranslated
           });

           //Displays the popup
           alertPopup.then(function(res) {
             console.log('Thank you for not eating my delicious ice cream cone');
           });
         };

    // Logout
    vm.logout = function() {
      $auth.logout();
      $rootScope.$broadcast("deletestate");
      vm.showAlert('global.LOGOUT_SUCCESS_TITLE', 'global.LOGOUT_SUCCESS_MESSAGE');
    };

    //Verify if user is authenticated
    vm.isAuthenticated = function() {
      return $auth.isAuthenticated();
    };

}]);

mrs.service('UserService', ['$rootScope', 'apiConfig', '$http', function ($rootScope, apiConfig, $http) {
    var vm = this;


        vm.model = {};

        vm.SaveState = function () {
            localStorage.userService = angular.toJson(vm.model);
        };

        vm.RestoreState = function () {
            vm.model = angular.fromJson(localStorage.userService);
        };

        vm.DeleteState = function () {
            localStorage.removeItem('userService');
        };

        vm.getAuthenticatedUser = function(){
          var apiUrl = apiConfig.base + apiConfig.authUser;
          $http.get(apiUrl)
              .then(function(response) {
                  console.log(response.data.user);

                  vm.model = response.data.user;
                  $rootScope.$broadcast("savestate");
              });

        };

    $rootScope.$on("savestate", vm.SaveState);
    $rootScope.$on("restorestate", vm.RestoreState);
    $rootScope.$on("deletestate", vm.DeleteState);

}]);
