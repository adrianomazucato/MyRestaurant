(function(){
  'use strict';

  angular
        .module('myrestaurant')
        .service('CartService', CartService);

  CartService.$inject = ['$rootScope', '$ionicPopup'];

  function CartService($rootScope, $ionicPopup) {
    var vm = this;

    vm.items = [];
    vm.shouldShowDelete = false;

    //
    vm.addItem            = addItem;
    vm.removeItem         = removeItem;
    vm.emptyCart          = emptyCart;
    vm.incrementQuantity  = incrementQuantity;
    vm.decrementQuantity  = decrementQuantity;
    vm.totalAmount        = totalAmount;
    vm.toggleDelete       = toggleDelete;
    vm.setItemQuantity    = setItemQuantity;
    vm.findItemQuantity   = findItemQuantity;
    vm.countItems         = countItems;

    // Add an item to the cart
    function addItem(item, quantity){
      //Verifies if product is already in cart
      var itemInCart = false;

      vm.items.forEach(function(itm, index, itms){
        if (itm.id === item.id) {
          itemInCart = itm;
          return;
        }
      });

      //If item in cart, just increment quantity.
      if (itemInCart) {
        vm.setItemQuantity(itemInCart, quantity); // Set the quantity of an item already in cart
      } else {
        item.quantity = 0;
        vm.setItemQuantity(item, quantity); // Sets the quantity of an item that was not in cart
        vm.items.push(item);
      }

    }

    //Sets the Item quantity
    function setItemQuantity(item, quantity) {
      item.quantity = parseInt(item.quantity) + parseInt(quantity);
    }

    //Removes an item from the cart
    function removeItem(item) {
      var index = vm.items.indexOf(item);
      vm.items.splice(index, 1);
    }

    //Increment quantity of an item
    function incrementQuantity(item){
        item.quantity++;
    }

    //Decrement quantity of an item
    function decrementQuantity(item){
      if(item.quantity != 1)
      {
        item.quantity--;
      }
    }

    //Remove all items from the cart
    function emptyCart() {
      vm.items = [];
    }

    //Calculates the total amount
    function totalAmount() {
      var total = 0;
      for (var i = 0; i < vm.items.length; i++) {
        total = total + (vm.items[i].price * vm.items[i].quantity );
      }
      return total;
    }

    //Toggles delete button
    function toggleDelete(){
      if(vm.shouldShowDelete === true){
        vm.shouldShowDelete = false;
      } else {
         vm.shouldShowDelete = true;
      }
     }

    function findItemQuantity(item){
      vm.items.forEach(function(itm, index, itms){
        if (itm.id === item.id) {
          return vm.items[index].quantity;
        }
      });
      return 0;
     }

     function countItems(){
       return vm.items.length;
     }

     function addNotesToItem(item, notes){
       if(!notes){
          item.notes = '';
       }else{
         item.notes = notes;
       }

     }

    }

})();

(function() {
    'use strict';

    angular
        .module('myrestaurant')
        .factory('CategoryService', CategoryService);

    CategoryService.$inject = ['$http', '$ionicLoading', '$ionicPopup', 'apiConfig'];

    /* @ngInject */
    function CategoryService($http, $ionicLoading, $ionicPopup, apiConfig) {
        var service = {
            data: [],
            error: false,
            getAllCategories: getAllCategories
        };

        return service;

        // implementation
        function getAllCategories() {
          var apiUrl = apiConfig.base + apiConfig.categories;
          $ionicLoading.show();
          return $http.get(apiUrl, { cache: true, timeout: 5000}).then(success, error);
        }

        //Handles success callback
        function success (response){
              $ionicLoading.hide();
              service.data = response.data.data;
              service.error = false;
        }

        //Handles error callback
        function error (){
              $ionicLoading.hide();
              $ionicPopup.alert({title: 'Ops!', template: 'An error ocurred while trying to get categories list! Make sure your internet connection is active.'});
              service.error = true;
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('myrestaurant')
        .factory('ItemService', ItemService);

    ItemService.$inject = ['$http', '$ionicLoading', 'apiConfig'];

    /* @ngInject */
    function ItemService($http, $ionicLoading, apiConfig) {

        var service = {
          data: [],
          getAllItemsByCategoryId: getAllItemsByCategoryId,
          getItem: getItem
        };

        return service;

        // implementation
        function getAllItemsByCategoryId(category_id) {
          var apiUrl = apiConfig.base + apiConfig.categories + category_id + apiConfig.items + apiConfig.includeImages;
          $ionicLoading.show();
          return $http.get(apiUrl, { cache: true})
              .then(function(response) {
                  $ionicLoading.hide();
                  service.data = response.data.data;
              });

        }

        function getItem(category_id, item_id) {
          var apiUrl = apiConfig.base + apiConfig.categories + category_id + apiConfig.items + item_id + apiConfig.includeImages;
          $ionicLoading.show();
          return $http.get(apiUrl, { cache: true})
              .then(function(response) {
                  $ionicLoading.hide();
                  service.data = response.data.data;
              });

        }
    }
})();

(function() {
    'use strict';

    angular
        .module('myrestaurant')
        .service('LoginService', LoginService);

    LoginService.$inject = ['$state', '$ionicHistory', 'apiConfig', '$ionicLoading', '$auth', '$ionicPopup', '$filter', 'UserService', '$rootScope'];

    /* @ngInject */
    function LoginService($state, $ionicHistory, apiConfig, $ionicLoading, $auth, $ionicPopup, $filter, UserService, $rootScope) {

        var vm = this;

        // Form data for the login inputs
        vm.loginData = {};

        vm.doLogin         = doLogin;
        vm.closeLogin      = closeLogin;
        vm.isAuthenticated = isAuthenticated;
        vm.logout          = logout;
        vm.showAlert       = showAlert;

        //implementation

        function closeLogin() {
          $ionicHistory.nextViewOptions({
            disableBack: true
          });
          $state.go('app.home');
        }

        // Perform the login action when the user submits the login form
        function doLogin(provider) {
          $ionicLoading.show();
          $auth.login(vm.loginData, {url: apiConfig.base + apiConfig.auth, method: 'POST'})
          .then(function(response) {
            UserService.getAuthenticatedUser();
            $rootScope.$broadcast("savestate");
            vm.showAlert('global.LOGIN_SUCCESS_TITLE', 'global.LOGIN_SUCCESS_MESSAGE');
            vm.closeLogin();
            $ionicLoading.hide();
          })
          .catch(function(response) {
            // Handle errors here, such as displaying a notification
            // for invalid email and/or password.
            $ionicLoading.hide();
            vm.showAlert('global.LOGIN_ERROR_TITLE', 'global.LOGIN_ERROR_MESSAGE');
            vm.loginData.password = null;

          });

        }

        //Verify if user is authenticated
        function isAuthenticated() {
          return $auth.isAuthenticated();
        }

        // Logout
        function logout() {
          $auth.logout();
          $rootScope.$broadcast("deletestate");
          vm.showAlert('global.LOGOUT_SUCCESS_TITLE', 'global.LOGOUT_SUCCESS_MESSAGE');
        }

        function showAlert(title, message) {

               //Translates title and message
               var titleTranslated = $filter('translate')(title);
               var messageTranslated = $filter('translate')(message);

               //Creates the popup
               var alertPopup = $ionicPopup.alert({
                 title: titleTranslated,
                 template: messageTranslated
               });

               //Displays the popup
               alertPopup.then(function(res) {
                 console.log('Action after popup!');
               });
        }


    }
})();

(function() {
    'use strict';

    angular
        .module('myrestaurant.services')
        .factory('OrderService', OrderService);

    OrderService.$inject = ['$http', 'apiConfig', '$ionicLoading'];

    /* @ngInject */
    function OrderService($http, apiConfig, $ionicLoading) {

        var service = {
            makeOrder: makeOrder
        };

        return service;

        function makeOrder(items) {
          var apiUrl = apiConfig.base + apiConfig.makeOrder;
          $ionicLoading.show();
          return $http.post(apiUrl, {
            method: 'POST',
            cache: true,
            timeout: 5000,
            data:{items: items }
          }).then(success, error);
        }

        function success() {
          $ionicLoading.hide();
        }

        function error() {
          $ionicLoading.hide();
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('myrestaurant')
        .service('UserService', UserService);

    UserService.$inject = ['$rootScope', 'apiConfig', '$http'];

    /* @ngInject */
    function UserService($rootScope, apiConfig, $http) {

        var vm  = this;

        vm.model = {};

        vm.DeleteState          = DeleteState;
        vm.RestoreState         = RestoreState;
        vm.SaveState            = SaveState;
        vm.getAuthenticatedUser = getAuthenticatedUser;

        function DeleteState() {
            localStorage.removeItem('userService');
        }

        function getAuthenticatedUser(){
          var apiUrl = apiConfig.base + apiConfig.authUser;
          $http.get(apiUrl)
              .then(function(response) {
                  console.log(response.data.user);

                  vm.model = response.data.user;
                  $rootScope.$broadcast("savestate");
              });

        }

        function RestoreState() {
            vm.model = angular.fromJson(localStorage.userService);
        }

        function SaveState() {
            localStorage.userService = angular.toJson(vm.model);
        }

        //Watch for broadcast messages
        $rootScope.$on("savestate", vm.SaveState);
        $rootScope.$on("restorestate", vm.RestoreState);
        $rootScope.$on("deletestate", vm.DeleteState);
    }
    
})();
