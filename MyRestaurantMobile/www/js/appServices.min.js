mrs.service('CartService', ['$rootScope', '$ionicPopup', function ($rootScope, $ionicPopup) {

    var vm = this;

    vm.items = [];

    vm.addItem = function (item, quantity) {
      item.quantity = quantity;
      vm.items.push(item);
      console.log(vm.items);
    };

    vm.removeItem = function (item) {
      var index = vm.items.indexOf(item);
      vm.items.splice(index, 1);
    };

    vm.changeQuantity = function (quantity) {
      var index = vm.items.indexOf(item);
      vm.items[index].quantity = quantity;
    };

    vm.emptyCart = function () {
      vm.items = [];
    };


  // An elaborate, custom popup
  var myPopup = $ionicPopup.show({
    template: '<input type="number" ng-model="vm.quantity">',
    title: 'Enter Quantity',
    subTitle: 'hahaha',
    scope: null,
    buttons: [
      { text: 'Cancel' },
      {
        text: '<b>Add</b>',
        type: 'button-positive',
        onTap: function(e) {
          if (!vm.quantity) {
            //don't allow the user to close unless he enters wifi password
            e.preventDefault();
          } else {
            return vm.quantity;
          }
        }
      }
    ]
  });

  myPopup.then(function(res) {
    console.log('Tapped!', res);
  });

}]);

mrs.factory('CategoryService', [ '$http', '$ionicLoading', 'appConfig', '$ionicPopup', function($http, $ionicLoading, appConfig, $ionicPopup){

  // interface
  var service = {
      data: [],
      error: false,
      getAllCategories: getAllCategories
  };

  return service;

  // implementation
  function getAllCategories() {
    var apiUrl = appConfig.apiUrl + "/category";
    $ionicLoading.show();
    return $http.get(apiUrl, { cache: true}).then(success, error);
  }

  //Handles success callback
  function success (response){
        $ionicLoading.hide();
        service.data = response.data.data;
  }

  //Handles error callback
  function error (){
        $ionicLoading.hide();
        $ionicPopup.alert({title: 'Ops!', template: 'An error ocurred while trying to get categories list! Make sure your internet connection is active.'});
        service.error = true;
  }

}]);

mrs.factory('ItemService', [ '$http', '$ionicLoading', 'appConfig', function($http, $ionicLoading, appConfig){

  // interface
  var service = {
      data: [],
      getAllItemsByCategoryId: getAllItemsByCategoryId,
      getItem: getItem
  };

  return service;

  // implementation
  function getAllItemsByCategoryId(category_id) {
    var apiUrl = appConfig.apiUrl + "/category/" + category_id + "/item";
    $ionicLoading.show();
    return $http.get(apiUrl, { cache: true})
        .success(function(response) {
            $ionicLoading.hide();
            service.data = response.data;
        });

  }

  function getItem(category_id, item_id) {
    var apiUrl = appConfig.apiUrl + "/category/" + category_id + "/item/" + item_id;
    $ionicLoading.show();
    return $http.get(apiUrl, { cache: true})
        .success(function(response) {
            $ionicLoading.hide();
            service.data = response.data;
        });

  }



}]);

mrs.service('UserService', ['$rootScope', function ($rootScope) {
    var vm = this;


    vm.model = {
            name: '',
            email: ''
            };

        vm.SaveState = function () {
            localStorage.userService = angular.toJson(vm.model);
        };

        vm.RestoreState = function () {
            vm.model = angular.fromJson(localStorage.userService);
        };

        vm.DeleteState = function () {
            localStorage.removeItem('userService');
        };

    $rootScope.$on("savestate", vm.SaveState);
    $rootScope.$on("restorestate", vm.RestoreState);
    $rootScope.$on("deletestate", vm.DeleteState);

}]);
